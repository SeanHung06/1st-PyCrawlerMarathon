[<p><b>網路爬蟲</b>（英語：<span lang="en">web crawler</span>），也叫<b>網路蜘蛛</b>（<span lang="en">spider</span>），是一種用來自動瀏覽<a href="/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" title="全球資訊網">全球資訊網</a>的<a href="/wiki/%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%99%A8%E4%BA%BA" title="網路機器人">網路機器人</a>。其目的一般為編纂<span class="ilh-all" data-foreign-title="Web indexing" data-lang-code="en" data-lang-name="英語" data-orig-title="网络索引"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%BD%91%E7%BB%9C%E7%B4%A2%E5%BC%95&amp;action=edit&amp;redlink=1" title="網路索引（頁面不存在）">網路索引</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Web_indexing" title="en:Web indexing"><span dir="auto" lang="en">Web indexing</span></a></span>）</span></span>。
</p>, <p><a href="/wiki/%E7%BD%91%E7%BB%9C%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" title="網路搜尋引擎">網路</a><a href="/wiki/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E" title="搜尋引擎">搜尋引擎</a>等站點通過爬蟲軟體更新自身的<span class="ilh-all" data-foreign-title="Web content" data-lang-code="en" data-lang-name="英語" data-orig-title="網站內容"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%B6%B2%E7%AB%99%E5%85%A7%E5%AE%B9&amp;action=edit&amp;redlink=1" title="網站內容（頁面不存在）">網站內容</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Web_content" title="en:Web content"><span dir="auto" lang="en">Web content</span></a></span>）</span></span>或其對其他網站的索引。網路爬蟲可以將自己所存取的頁面儲存下來，以便搜尋引擎事後生成<span class="ilh-all" data-foreign-title="Index (search engine)" data-lang-code="en" data-lang-name="英語" data-orig-title="索引 (搜索引擎)"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%B4%A2%E5%BC%95_(%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E)&amp;action=edit&amp;redlink=1" title="索引 (搜尋引擎)（頁面不存在）">索引</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Index_(search_engine)" title="en:Index (search engine)"><span dir="auto" lang="en">Index (search engine)</span></a></span>）</span></span>供用戶搜尋。
</p>, <p>爬蟲存取網站的過程會消耗目標系統資源。不少網路系統並不默許爬蟲工作。因此在存取大量頁面時，爬蟲需要考慮到規劃、負載，還需要講「禮貌」。 不願意被爬蟲存取、被爬蟲主人知曉的公開站點可以使用<a href="/wiki/Robots.txt" title="Robots.txt">robots.txt</a>檔案之類的方法避免存取。這個檔案可以要求<span class="ilh-all" data-foreign-title="Software agent" data-lang-code="en" data-lang-name="英語" data-orig-title="软件助理"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E8%BD%AF%E4%BB%B6%E5%8A%A9%E7%90%86&amp;action=edit&amp;redlink=1" title="軟體助理（頁面不存在）">機器人</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Software_agent" title="en:Software agent"><span dir="auto" lang="en">Software agent</span></a></span>）</span></span>只對<a class="mw-redirect" href="/wiki/%E7%BD%91%E7%AB%99" title="網站">網站</a>的一部分進行索引，或完全不作處理。
</p>, <p>網際網路上的頁面極多，即使是最大的爬蟲系統也無法做出完整的索引。因此在公元2000年之前的全球資訊網出現初期，搜尋引擎經常找不到多少相關結果。現在的搜尋引擎在這方面已經進步很多，能夠即刻給出高品質結果。
</p>, <p>爬蟲還可以驗證<a href="/wiki/%E8%B6%85%E9%80%A3%E7%B5%90" title="超連結">超連結</a>和<a href="/wiki/HTML" title="HTML">HTML</a>代碼，用於<span class="ilh-all" data-foreign-title="Web scraping" data-lang-code="en" data-lang-name="英語" data-orig-title="网络抓取"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8F%96&amp;action=edit&amp;redlink=1" title="網路抓取（頁面不存在）">網路抓取</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Web_scraping" title="en:Web scraping"><span dir="auto" lang="en">Web scraping</span></a></span>）</span></span>（參見<span class="ilh-all" data-foreign-title="Data-driven programming" data-lang-code="en" data-lang-name="英語" data-orig-title="数据驱动编程"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B&amp;action=edit&amp;redlink=1" title="資料驅動編程（頁面不存在）">資料驅動編程</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/Data-driven_programming" title="en:Data-driven programming"><span dir="auto" lang="en">Data-driven programming</span></a></span>）</span></span>）。
</p>, <p>網路爬蟲也可稱作網路蜘蛛<sup class="reference" id="cite_ref-spekta_1-0"><a href="#cite_note-spekta-1">[1]</a></sup>、螞蟻、自動索引程式（<span lang="en">automatic indexer</span>）<sup class="reference" id="cite_ref-2"><a href="#cite_note-2">[2]</a></sup> ，或（在<span class="ilh-all" data-foreign-title="FOAF (software)" data-lang-code="en" data-lang-name="英語" data-orig-title="FOAF (软件)"><span class="ilh-page"><a class="new" href="/w/index.php?title=FOAF_(%E8%BD%AF%E4%BB%B6)&amp;action=edit&amp;redlink=1" title="FOAF (軟體)（頁面不存在）">FOAF</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/FOAF_(software)" title="en:FOAF (software)"><span dir="auto" lang="en">FOAF (software)</span></a></span>）</span></span>軟體中）稱為網路疾走（<span lang="en">web scutter</span>）。<sup class="reference" id="cite_ref-3"><a href="#cite_note-3">[3]</a></sup>
</p>, <p>網路爬蟲始於一張被稱作種子的統一資源位址（URL）列表。當網路爬蟲存取這些統一資源定位器時，它們會甄別出頁面上所有的超連結，並將它們寫入一張「待訪列表」，即所謂<span class="ilh-all" data-foreign-title="crawl frontier" data-lang-code="en" data-lang-name="英語" data-orig-title="爬行疆域"><span class="ilh-page"><a class="new" href="/w/index.php?title=%E7%88%AC%E8%A1%8C%E7%96%86%E5%9F%9F&amp;action=edit&amp;redlink=1" title="爬行疆域（頁面不存在）">爬行疆域</a></span><span class="noprint ilh-comment">（<span class="ilh-lang">英語</span><span class="ilh-colon">：</span><span class="ilh-link"><a class="extiw" href="https://en.wikipedia.org/wiki/crawl_frontier" title="en:crawl frontier"><span dir="auto" lang="en">crawl frontier</span></a></span>）</span></span>。此疆域上的URL將會被按照一套策略迴圈來存取。如果爬蟲在執行的過程中複製歸檔和儲存網站上的資訊，這些檔案通常儲存，使他們可以較容易的被檢視。閱讀和瀏覽他們儲存的網站上並即時更新的資訊，這些被儲存的<a href="/wiki/%E7%B6%B2%E9%A0%81" title="網頁">網頁</a>又被稱為「快照」。越大容量的網頁意味著網路爬蟲只能在給予的時間內下載越少部分的網頁，所以要優先考慮其下載。高變化率意味著網頁可能已經被更新或者被取代。一些伺服器端軟體生成的URL（統一資源定位符）也使得網路爬蟲很難避免檢索到重複內容。
</p>, <p>但是<a href="/wiki/%E4%BA%92%E8%81%94%E7%BD%91" title="網際網路">網際網路</a>的資源卷帙浩繁，這也意味著網路爬蟲只能在一定時間內下載有限數量的網頁，因此它需要衡量優先順序的下載方式。有時候網頁出現、更新和消失的速度很快，也就是說網路爬蟲下載的網頁在幾秒後就已經被修改或甚至刪除了。這些都是網路爬蟲設計師們所面臨的兩個問題。
</p>, <p>再者，<a href="/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8" title="伺服器">伺服器</a>端軟體所生成的統一資源位址數量龐大，以至網路爬蟲難免也會採集到重複的內容。根據<a class="mw-redirect" href="/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E5%82%B3%E8%BC%B8%E5%8D%94%E5%AE%9A" title="超文字傳輸協定">超文字傳輸協定</a>，無盡組合的參數所返回的頁面中，只有很少一部分確實傳回正確的內容。例如：數張快照陳列室的網站，可能通過幾個參數，讓用戶選擇相關快照：其一是通過四種方法對快照排序，其二是關於快照解析度的的三種選擇，其三是兩種檔案格式，另加一個用戶可否提供內容的選擇，這樣對於同樣的結果會有48種（4*3*2）不同的統一資源位址與其關聯。這種數學組合替網路爬蟲造成了麻煩，因為它們必須越過這些無關指令碼變化的組合，尋找不重複的內容。
</p>, <p>爬蟲的實現由以下策略組成：<sup class="reference" id="cite_ref-4"><a href="#cite_note-4">[4]</a></sup>
</p>, <p>爬蟲可能只想搜尋HTML頁面而避免其他MIME 類型。為了只請求HTML資源，爬蟲在抓取整個以GET方式請求的資源之前，通過建立HTTP的HEAD請求來決定網路資源的MIME類型。為了避免發出過多的請求，爬蟲會檢查URL和只請求那些以某些字元（如.html, .htm, .asp, .aspx, .php, .jsp, .jspx 或 / ）作為字尾的URL。這個策略可能會跳過很多HTML網路資源。
</p>, <p>有些爬蟲還能避免請求一些帶有「?」的資源（動態生成）。為了避免掉入從網站下載無限量的URL的爬蟲陷阱。不過假若網站重寫URL以簡化URL的目的，這個策略就變得不可靠了。
</p>, <p>爬蟲通常使用某些URL規格化的方式以避免資源的重複爬取。URL規格化，指的是以某種一致的方式修改和標準化URL的過程。這個過程有各種各樣的處理規則，包括統一轉換為小寫、移除「.」和「..」片段，以及在非空路徑里插入斜杆。
</p>, <p>有些爬蟲希望從指定的網站中儘可能地爬取資源。而路徑上移爬蟲就是為了能爬取每個URL里提示出的每個路徑。<sup class="reference" id="cite_ref-5"><a href="#cite_note-5">[5]</a></sup> 例如，給定一個Http的種子URL: http://llama.org/hamster/monkey/page.html ，要爬取 /hamster/monkey/ ， /hamster/ 和 / 。Cothey發現路徑能非常有效地爬取獨立的資源，或以某種規律無法在站內部連結接爬取到的資源。
</p>, <p>對於爬蟲來說，一個頁面的重要性也可以說是，給定查詢條件一個頁面相似效能起到的作用。網路爬蟲要下載相似的網頁被稱為主題爬蟲或局部爬蟲。這個主題爬蟲或局部爬蟲的概念第一次被<a class="new" href="/w/index.php?title=Filippo_Menczer&amp;action=edit&amp;redlink=1" title="Filippo Menczer（頁面不存在）">Filippo Menczer</a><sup class="reference" id="cite_ref-6"><a href="#cite_note-6">[6]</a></sup><sup class="reference" id="cite_ref-7"><a href="#cite_note-7">[7]</a></sup> 和  Soumen Chakrabarti <i>等人提出的。</i><sup class="reference" id="cite_ref-8"><a href="#cite_note-8">[8]</a></sup>
</p>, <p>網站的屬性之一就是經常動態變化，而爬取網站的一小部分往往需要花費幾個星期或者幾個月。等到網站爬蟲完成它的爬取，很多事件也已經發生了，包括增加、更新和刪除。
在搜尋引擎的角度，因為沒有檢測這些變化，會導致儲存了過期資源的代價。最常用的估價函式是新鮮度和過時性。
新鮮度：這是一個衡量抓取內容是不是準確的二元值。在時間t內，倉庫中頁面p的新鮮度是這樣定義的：
</p>, <p>過時性:這是一個衡量本地已抓取的內容過時程度的指標。在時間t時，倉庫中頁面p的時效性的定義如下：
</p>, <p>爬蟲相比於人，可以有更快的檢索速度和更深的層次，所以，他們可能使一個站點癱瘓。不需要說一個單獨的爬蟲一秒鐘要執行多條請求，下載大的檔案。一個伺服器也會很難回應多執行緒爬蟲的請求。
就像Koster所注意的那樣，爬蟲的使用對很多工作都是很有用的，但是對一般的社區，也需要付出代價。使用爬蟲的代價包括：<sup class="reference" id="cite_ref-coffman_9-0"><a href="#cite_note-coffman-9">[9]</a></sup>
</p>, <p>對這些問題的局部解決方法是漫遊器排除協定（Robots exclusion protocol），也被稱為robots.txt議定書<sup class="reference" id="cite_ref-10"><a href="#cite_note-10">[10]</a></sup>，這份協定是讓管理員指明網路伺服器的不應該爬取的約定。這個標準沒有包括重新存取一台伺服器的間隔的建議，雖然設定存取間隔是避免伺服器超載的最有效辦法。最近的商業搜尋引擎，如Google，Ask Jeeves，MSN和Yahoo可以在robots.txt中使用一個額外的 「Crawl-delay」參數來指明請求之間的延遲。
</p>, <p>一個並列爬蟲是並列執行多個行程的爬蟲。它的目標是最大化下載的速度，同時儘量減少並列的開銷和下載重複的頁面。為了避免下載一個頁面兩次，爬蟲系統需要策略來處理爬蟲執行時新發現的URL，因為同一個URL位址，可能被不同的爬蟲行程抓到。
</p>, <p><br/>
</p>]